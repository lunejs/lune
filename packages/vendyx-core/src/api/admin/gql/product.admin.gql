type ProductTranslation {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  name: String
  slug: String
  description: String
  locale: Locale!
}

extend type Product {
  """
  Whether the product is archived or not.
  Archived products are not exposed to the storefront API and are not visible in the admin ui by default.
  Useful for products that are not available anymore but you don't want to lose their data.
  """
  archived: Boolean!

  translations: [ProductTranslation!]!
}

type Query {
  products(input: ProductListInput): ProductList!
  """
  Get a list of products by their variant IDs.
  Useful for fetching products win cases when you only have variant IDs like
  fetching products from a discount metadata
  """
  productsByVariantIds(ids: [ID!]!, input: ProductListInput): ProductList!
}

type Mutation {
  createProduct(input: CreateProductInput!): Product!
  updateProduct(id: ID!, input: UpdateProductInput!): Product!
  softRemoveProducts(ids: [ID!]!): Boolean!
  addProductTranslation(id: ID!, input: AddProductTranslationInput!): ProductTranslation!
}

input CreateProductInput {
  name: String!
  description: String
  enabled: Boolean

  assets: [AssetInEntity!]
  tags: [ID!]
}

input UpdateProductInput {
  name: String
  description: String
  enabled: Boolean
  archived: Boolean

  assets: [AssetInEntity!]
  tags: [ID!]
}

input AddProductTranslationInput {
  locale: Locale!
  name: String
  description: String
}

input ProductListInput {
  """
  Skip the first n results
  """
  skip: Int

  """
  takes n result from where the skip position is
  """
  take: Int

  """
  Filters to apply
  """
  filters: ProductFilters
}

input ProductFilters {
  name: StringFilter
  enabled: BooleanFilter
  archived: BooleanFilter
}
