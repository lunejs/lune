"""
A vendyx shop
"""
type Shop implements Node {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  """
  The shop's name
  """
  name: String!
  """
  The shop's slug
  """
  slug: String!
  """
  Api key for other stores to connect to this store
  """
  storefrontApiKey: String!
  """
  Contact email for the shop, used to show as contact information in emails
  """
  email: String!
  """
  Contact phone number for the shop, used to show as contact information in emails
  """
  phoneNumber: String!
  """
  The shop's logo, used for emails and branding in admin and storefront
  """
  logo: String
  """
  The shop's storefront url
  """
  storefrontUrl: String
  """
  The shop's socials, used for branding and social media links in emails and storefront
  """
  socials: ShopSocials
  """
  The shop's owner
  """
  owner: User!
}

type Query {
  """
  Get shop by slug
  """
  shop(slug: String!): Shop
  """
  Get a list of shops
  """
  shops(input: ListInput): ShopList!
}

type Mutation {
  """
  Create a new shop
  """
  createShop(input: CreateShopInput!): ShopResult!
  """
  Update an existing shop details
  """
  updateShop(shopSlug: String!, input: UpdateShopInput!): ShopResult!
}

type ShopSocials {
  facebook: String
  twitter: String
  instagram: String
}

input ShopSocialsInput {
  facebook: String
  twitter: String
  instagram: String
}

type ShopList implements List {
  items: [Shop!]!
  count: Int!
  pageInfo: PageInfo!
}

input CreateShopInput {
  name: String!
  email: String!
  phoneNumber: String!
  logo: String
  socials: ShopSocialsInput
  storefrontUrl: String
}

input UpdateShopInput {
  name: String
  email: String
  phoneNumber: String
  logo: String
  socials: ShopSocialsInput
  storefrontUrl: String
}

type ShopResult {
  shop: Shop
  apiErrors: [ShopErrorResult!]!
}

type ShopErrorResult {
  code: ShopErrorCode!
  message: String!
}

enum ShopErrorCode {
  """
  Error thrown when the emails provided for a shop already exists
  """
  EMAIL_ALREADY_EXISTS
}
